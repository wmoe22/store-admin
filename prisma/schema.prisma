// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Store{
  id String @id @default(uuid())
  name String
  logoUrl String? 
  userId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  colors Color[] @relation("StoreToColor")
  billboards Billboard[] @relation("StoreToBillboard")
  category  Category[] @relation("StoreToCategory")
  size  Size[] @relation("StoreToSize")
  brand  Brand[] @relation("StoreToBrand")
  discounts Discount[] @relation("StoreToDiscount")
  products Product[] @relation("StoreToProduct")
  customers Customer[] @relation("StoreToCustomer")
  orders Order[] @relation("StoreToOrder")
  
}

model Billboard{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  label String
  categories Category[]
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model Category  {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  products Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}




model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize",fields: [storeId],references: [id])
  products Product[] 
  name String
  value String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([storeId])
   
}

model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor",fields: [storeId],references: [id])
  products Product[] 
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
   
}



model Brand {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBrand",fields: [storeId],references: [id])
  name String
  logo String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
   
}

model Discount {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToDiscount", fields: [storeId], references: [id])
  name        String
  percentage  Float
  isArchived  Boolean   @default(false)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productId   String
  products    Product @relation("DiscountToProduct", fields: [productId], references: [id])
  @@index([storeId])
}


model Product {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  quantity    Int?
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  discounts   Discount[] @relation("DiscountToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([colorId])
  @@index([sizeId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id])
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}


model Customer {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCustomer",fields: [storeId],references: [id])
  name String
  email String @default("")
  phone String @default("")
  address     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])

}


model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder",fields: [storeId],references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  customerName String?
  email String?
  paymentInfo String?
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])

}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId],references: [id])
  productId String
  product Product @relation(fields: [productId],references: [id])
  @@index([orderId])
  @@index([productId])
}